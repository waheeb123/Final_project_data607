{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOLuw3aiKM9PGH4TvyhoYF5",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/waheeb123/practice_using_spark_and_kafka/blob/main/run%20a%20new%20simulation%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    import pint\n",
        "except ImportError:\n",
        "    !pip install pint\n",
        "    import pint"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vQW5r49GT9j5",
        "outputId": "31771efb-29e6-4bb9-ed1a-c9940a672438"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting pint\n",
            "  Downloading Pint-0.22-py3-none-any.whl (294 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m294.0/294.0 kB\u001b[0m \u001b[31m11.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: typing-extensions in /usr/local/lib/python3.10/dist-packages (from pint) (4.5.0)\n",
            "Installing collected packages: pint\n",
            "Successfully installed pint-0.22\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "try:\n",
        "    from modsim import *\n",
        "except ImportError:\n",
        "    !pip install modsimpy\n",
        "    from modsim import *"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VmeMlji3UT46",
        "outputId": "f07f10bd-e648-4576-b420-492f47528616"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting modsimpy\n",
            "  Downloading modsimpy-1.1.3.tar.gz (19 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: modsimpy\n",
            "  Building wheel for modsimpy (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for modsimpy: filename=modsimpy-1.1.3-py3-none-any.whl size=20335 sha256=2138f05601ab4c97cfbc34cf9f437f020e25d9272d098f83531e2ab65bd503fb\n",
            "  Stored in directory: /root/.cache/pip/wheels/3a/21/22/b652cf3a4fc674c3377fdeb77da04bba02954a4ea5abe331be\n",
            "Successfully built modsimpy\n",
            "Installing collected packages: modsimpy\n",
            "Successfully installed modsimpy-1.1.3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# The first time you use simpy and simpy_helpers, you'll need to download them\n",
        "# you can either download through pip in the command line / terminal, or you can\n",
        "# uncomment the below lines and run from jupyter directly\n",
        "\n",
        "!pip install simpy\n",
        "!pip install simpy_helpers"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6X0GYDgOUeLj",
        "outputId": "9b13d181-336e-4cb9-9737-564e53ab74c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting simpy\n",
            "  Downloading simpy-4.0.1-py2.py3-none-any.whl (29 kB)\n",
            "Installing collected packages: simpy\n",
            "Successfully installed simpy-4.0.1\n",
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Collecting simpy_helpers\n",
            "  Downloading simpy_helpers-1.2.0-py3-none-any.whl (9.6 kB)\n",
            "Requirement already satisfied: simpy<=5,>=3 in /usr/local/lib/python3.10/dist-packages (from simpy_helpers) (4.0.1)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from simpy_helpers) (1.22.4)\n",
            "Installing collected packages: simpy_helpers\n",
            "Successfully installed simpy_helpers-1.2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#################\n",
        "##   imports   ##\n",
        "#################\n",
        "import random\n",
        "import simpy\n",
        "from simpy_helpers import Entity, Resource, Source, Stats\n",
        "import numpy as np # numpy will be used for randomness and distribution methods\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "k2ALPoO-UvQF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3S6yNM2KTO5c",
        "outputId": "6579a355-674d-44ba-cb11-f21210c1abaf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Patient_0: Being triaged at time 0\n",
            "Patient_0: Admitted to a bed at time 0\n",
            "Patient_0: Receiving treatment at time 5\n",
            "Patient_0: Treatment completed at time 33\n",
            "Patient_0: Discharged at time 33\n",
            "Patient_1: Being triaged at time 35.27654722679978\n",
            "Patient_1: Admitted to a bed at time 35.27654722679978\n",
            "Patient_1: Receiving treatment at time 40.27654722679978\n",
            "Patient_1: Treatment completed at time 53.27654722679978\n",
            "Patient_1: Discharged at time 53.27654722679978\n",
            "Patient_2: Being triaged at time 55.11739130979393\n",
            "Patient_2: Admitted to a bed at time 55.11739130979393\n",
            "Patient_3: Being triaged at time 59.07941780697465\n",
            "Patient_3: Admitted to a bed at time 59.07941780697465\n",
            "Patient_2: Receiving treatment at time 60.11739130979393\n",
            "Patient_3: Receiving treatment at time 64.07941780697465\n",
            "Patient_4: Being triaged at time 67.9079420576999\n",
            "Patient_4: Admitted to a bed at time 67.9079420576999\n",
            "Patient_5: Being triaged at time 70.90665989841254\n",
            "Patient_4: Receiving treatment at time 72.9079420576999\n",
            "Patient_2: Treatment completed at time 76.11739130979393\n",
            "Patient_2: Discharged at time 76.11739130979393\n",
            "Patient_5: Admitted to a bed at time 76.11739130979393\n",
            "Patient_6: Being triaged at time 76.6943763953518\n",
            "Patient_5: Receiving treatment at time 81.11739130979393\n",
            "Patient_3: Treatment completed at time 84.07941780697465\n",
            "Patient_3: Discharged at time 84.07941780697465\n",
            "Patient_6: Admitted to a bed at time 84.07941780697465\n",
            "Patient_7: Being triaged at time 86.26347430793304\n",
            "Patient_6: Receiving treatment at time 89.07941780697465\n",
            "Patient_5: Treatment completed at time 91.11739130979393\n",
            "Patient_5: Discharged at time 91.11739130979393\n",
            "Patient_7: Admitted to a bed at time 91.11739130979393\n",
            "Patient_8: Being triaged at time 95.69534586303791\n",
            "Patient_7: Receiving treatment at time 96.11739130979393\n",
            "Patient_4: Treatment completed at time 97.9079420576999\n",
            "Patient_4: Discharged at time 97.9079420576999\n",
            "Patient_8: Admitted to a bed at time 97.9079420576999\n",
            "Patient_8: Receiving treatment at time 102.9079420576999\n",
            "Patient_6: Treatment completed at time 106.07941780697465\n",
            "Patient_6: Discharged at time 106.07941780697465\n",
            "Patient_9: Being triaged at time 114.89170674877172\n",
            "Patient_9: Admitted to a bed at time 114.89170674877172\n",
            "Patient_9: Receiving treatment at time 119.89170674877172\n",
            "Patient_7: Treatment completed at time 122.11739130979393\n",
            "Patient_7: Discharged at time 122.11739130979393\n",
            "Patient_8: Treatment completed at time 124.9079420576999\n",
            "Patient_8: Discharged at time 124.9079420576999\n",
            "Patient_10: Being triaged at time 126.45168100277219\n",
            "Patient_10: Admitted to a bed at time 126.45168100277219\n",
            "Patient_9: Treatment completed at time 130.89170674877172\n",
            "Patient_9: Discharged at time 130.89170674877172\n",
            "Patient_10: Receiving treatment at time 131.4516810027722\n",
            "Patient_11: Being triaged at time 144.4970960791942\n",
            "Patient_11: Admitted to a bed at time 144.4970960791942\n",
            "Patient_12: Being triaged at time 149.27205204954245\n",
            "Patient_12: Admitted to a bed at time 149.27205204954245\n",
            "Patient_11: Receiving treatment at time 149.4970960791942\n",
            "Patient_10: Treatment completed at time 150.4516810027722\n",
            "Patient_10: Discharged at time 150.4516810027722\n",
            "Patient_12: Receiving treatment at time 154.27205204954245\n",
            "Patient_12: Treatment completed at time 164.27205204954245\n",
            "Patient_12: Discharged at time 164.27205204954245\n",
            "Patient_13: Being triaged at time 170.34669059873124\n",
            "Patient_13: Admitted to a bed at time 170.34669059873124\n",
            "Patient_11: Treatment completed at time 173.4970960791942\n",
            "Patient_11: Discharged at time 173.4970960791942\n",
            "Patient_14: Being triaged at time 173.58989756995666\n",
            "Patient_14: Admitted to a bed at time 173.58989756995666\n",
            "Patient_15: Being triaged at time 173.591918333273\n",
            "Patient_15: Admitted to a bed at time 173.591918333273\n",
            "Patient_13: Receiving treatment at time 175.34669059873124\n",
            "Patient_14: Receiving treatment at time 178.58989756995666\n",
            "Patient_15: Receiving treatment at time 178.591918333273\n",
            "Patient_14: Treatment completed at time 192.58989756995666\n",
            "Patient_14: Discharged at time 192.58989756995666\n",
            "Patient_15: Treatment completed at time 194.591918333273\n",
            "Patient_15: Discharged at time 194.591918333273\n",
            "Patient_13: Treatment completed at time 199.34669059873124\n",
            "Patient_13: Discharged at time 199.34669059873124\n",
            "Patient_16: Being triaged at time 215.61788593745555\n",
            "Patient_16: Admitted to a bed at time 215.61788593745555\n",
            "Patient_16: Receiving treatment at time 220.61788593745555\n",
            "Patient_16: Treatment completed at time 234.61788593745555\n",
            "Patient_16: Discharged at time 234.61788593745555\n",
            "Patient_17: Being triaged at time 243.38215053324217\n",
            "Patient_17: Admitted to a bed at time 243.38215053324217\n",
            "Patient_17: Receiving treatment at time 248.38215053324217\n",
            "Patient_18: Being triaged at time 252.001962076296\n",
            "Patient_18: Admitted to a bed at time 252.001962076296\n",
            "Patient_19: Being triaged at time 254.92154771754036\n",
            "Patient_19: Admitted to a bed at time 254.92154771754036\n",
            "Patient_20: Being triaged at time 256.23172636330105\n",
            "Patient_18: Receiving treatment at time 257.00196207629597\n",
            "Patient_19: Receiving treatment at time 259.92154771754036\n",
            "Patient_21: Being triaged at time 263.7113848701879\n",
            "Patient_22: Being triaged at time 264.64481967067377\n",
            "Patient_23: Being triaged at time 265.2023221932533\n",
            "Patient_17: Treatment completed at time 273.38215053324217\n",
            "Patient_17: Discharged at time 273.38215053324217\n",
            "Patient_20: Admitted to a bed at time 273.38215053324217\n",
            "Patient_19: Treatment completed at time 273.92154771754036\n",
            "Patient_19: Discharged at time 273.92154771754036\n",
            "Patient_21: Admitted to a bed at time 273.92154771754036\n",
            "Patient_20: Receiving treatment at time 278.38215053324217\n",
            "Patient_21: Receiving treatment at time 278.92154771754036\n",
            "Patient_18: Treatment completed at time 279.00196207629597\n",
            "Patient_18: Discharged at time 279.00196207629597\n",
            "Patient_22: Admitted to a bed at time 279.00196207629597\n",
            "Patient_22: Receiving treatment at time 284.00196207629597\n",
            "Patient_24: Being triaged at time 287.81166179880915\n",
            "Patient_25: Being triaged at time 288.54936570153706\n",
            "Patient_26: Being triaged at time 294.29410516053053\n",
            "Patient_27: Being triaged at time 296.3507991314062\n",
            "Patient_21: Treatment completed at time 299.92154771754036\n",
            "Patient_21: Discharged at time 299.92154771754036\n",
            "Patient_23: Admitted to a bed at time 299.92154771754036\n",
            "Patient_20: Treatment completed at time 303.38215053324217\n",
            "Patient_20: Discharged at time 303.38215053324217\n",
            "Patient_24: Admitted to a bed at time 303.38215053324217\n",
            "Patient_23: Receiving treatment at time 304.92154771754036\n",
            "Patient_24: Receiving treatment at time 308.38215053324217\n",
            "Patient_22: Treatment completed at time 314.00196207629597\n",
            "Patient_22: Discharged at time 314.00196207629597\n",
            "Patient_25: Admitted to a bed at time 314.00196207629597\n",
            "Patient_25: Receiving treatment at time 319.00196207629597\n",
            "Patient_24: Treatment completed at time 323.38215053324217\n",
            "Patient_24: Discharged at time 323.38215053324217\n",
            "Patient_26: Admitted to a bed at time 323.38215053324217\n",
            "Patient_26: Receiving treatment at time 328.38215053324217\n",
            "Patient_28: Being triaged at time 329.0840167994842\n",
            "Patient_23: Treatment completed at time 330.92154771754036\n",
            "Patient_23: Discharged at time 330.92154771754036\n",
            "Patient_27: Admitted to a bed at time 330.92154771754036\n",
            "Patient_27: Receiving treatment at time 335.92154771754036\n",
            "Patient_29: Being triaged at time 337.52385520170986\n",
            "Patient_30: Being triaged at time 341.87583716429674\n",
            "Patient_25: Treatment completed at time 344.00196207629597\n",
            "Patient_25: Discharged at time 344.00196207629597\n",
            "Patient_28: Admitted to a bed at time 344.00196207629597\n",
            "Patient_31: Being triaged at time 345.32484730056035\n",
            "Patient_32: Being triaged at time 347.23081846759015\n",
            "Patient_28: Receiving treatment at time 349.00196207629597\n",
            "Patient_33: Being triaged at time 356.20902080073034\n",
            "Patient_26: Treatment completed at time 358.38215053324217\n",
            "Patient_26: Discharged at time 358.38215053324217\n",
            "Patient_29: Admitted to a bed at time 358.38215053324217\n",
            "Patient_34: Being triaged at time 358.87543748728694\n",
            "Patient_27: Treatment completed at time 362.92154771754036\n",
            "Patient_27: Discharged at time 362.92154771754036\n",
            "Patient_30: Admitted to a bed at time 362.92154771754036\n",
            "Patient_29: Receiving treatment at time 363.38215053324217\n",
            "Patient_35: Being triaged at time 367.74109398209987\n",
            "Patient_30: Receiving treatment at time 367.92154771754036\n",
            "Patient_36: Being triaged at time 369.5133714995087\n",
            "Patient_37: Being triaged at time 370.98192603571266\n",
            "Patient_28: Treatment completed at time 371.00196207629597\n",
            "Patient_28: Discharged at time 371.00196207629597\n",
            "Patient_31: Admitted to a bed at time 371.00196207629597\n",
            "Patient_29: Treatment completed at time 375.38215053324217\n",
            "Patient_29: Discharged at time 375.38215053324217\n",
            "Patient_32: Admitted to a bed at time 375.38215053324217\n",
            "Patient_31: Receiving treatment at time 376.00196207629597\n",
            "Patient_38: Being triaged at time 377.2935771680568\n",
            "Patient_32: Receiving treatment at time 380.38215053324217\n",
            "Patient_39: Being triaged at time 385.7106657306227\n",
            "Patient_40: Being triaged at time 388.5201518246601\n",
            "Patient_32: Treatment completed at time 390.38215053324217\n",
            "Patient_32: Discharged at time 390.38215053324217\n",
            "Patient_33: Admitted to a bed at time 390.38215053324217\n",
            "Patient_33: Receiving treatment at time 395.38215053324217\n",
            "Patient_30: Treatment completed at time 396.92154771754036\n",
            "Patient_30: Discharged at time 396.92154771754036\n",
            "Patient_34: Admitted to a bed at time 396.92154771754036\n",
            "Patient_41: Being triaged at time 399.8936251183873\n",
            "Patient_34: Receiving treatment at time 401.92154771754036\n",
            "Patient_31: Treatment completed at time 402.00196207629597\n",
            "Patient_31: Discharged at time 402.00196207629597\n",
            "Patient_35: Admitted to a bed at time 402.00196207629597\n",
            "Patient_42: Being triaged at time 403.63241900349465\n",
            "Patient_33: Treatment completed at time 405.38215053324217\n",
            "Patient_33: Discharged at time 405.38215053324217\n",
            "Patient_36: Admitted to a bed at time 405.38215053324217\n",
            "Patient_35: Receiving treatment at time 407.00196207629597\n",
            "Patient_36: Receiving treatment at time 410.38215053324217\n",
            "Patient_34: Treatment completed at time 419.92154771754036\n",
            "Patient_34: Discharged at time 419.92154771754036\n",
            "Patient_37: Admitted to a bed at time 419.92154771754036\n",
            "Patient_36: Treatment completed at time 421.38215053324217\n",
            "Patient_36: Discharged at time 421.38215053324217\n",
            "Patient_38: Admitted to a bed at time 421.38215053324217\n",
            "Patient_37: Receiving treatment at time 424.92154771754036\n",
            "Patient_43: Being triaged at time 425.35530132530164\n",
            "Patient_38: Receiving treatment at time 426.38215053324217\n",
            "Patient_35: Treatment completed at time 432.00196207629597\n",
            "Patient_35: Discharged at time 432.00196207629597\n",
            "Patient_39: Admitted to a bed at time 432.00196207629597\n",
            "Patient_39: Receiving treatment at time 437.00196207629597\n",
            "Patient_37: Treatment completed at time 439.92154771754036\n",
            "Patient_37: Discharged at time 439.92154771754036\n",
            "Patient_40: Admitted to a bed at time 439.92154771754036\n",
            "Patient_38: Treatment completed at time 440.38215053324217\n",
            "Patient_38: Discharged at time 440.38215053324217\n",
            "Patient_41: Admitted to a bed at time 440.38215053324217\n",
            "Patient_44: Being triaged at time 441.4477653807004\n",
            "Patient_45: Being triaged at time 442.38273559348255\n",
            "Patient_40: Receiving treatment at time 444.92154771754036\n",
            "Patient_41: Receiving treatment at time 445.38215053324217\n",
            "Patient_46: Being triaged at time 448.726264419685\n",
            "Patient_47: Being triaged at time 449.1067434501441\n",
            "Patient_39: Treatment completed at time 452.00196207629597\n",
            "Patient_39: Discharged at time 452.00196207629597\n",
            "Patient_42: Admitted to a bed at time 452.00196207629597\n",
            "Patient_48: Being triaged at time 454.6185434547416\n",
            "Patient_40: Treatment completed at time 454.92154771754036\n",
            "Patient_40: Discharged at time 454.92154771754036\n",
            "Patient_43: Admitted to a bed at time 454.92154771754036\n",
            "Patient_42: Receiving treatment at time 457.00196207629597\n",
            "Patient_49: Being triaged at time 459.1962674084199\n",
            "Patient_43: Receiving treatment at time 459.92154771754036\n",
            "Patient_41: Treatment completed at time 468.38215053324217\n",
            "Patient_41: Discharged at time 468.38215053324217\n",
            "Patient_44: Admitted to a bed at time 468.38215053324217\n",
            "Patient_42: Treatment completed at time 473.00196207629597\n",
            "Patient_42: Discharged at time 473.00196207629597\n",
            "Patient_45: Admitted to a bed at time 473.00196207629597\n",
            "Patient_44: Receiving treatment at time 473.38215053324217\n",
            "Patient_43: Treatment completed at time 476.92154771754036\n",
            "Patient_43: Discharged at time 476.92154771754036\n",
            "Patient_46: Admitted to a bed at time 476.92154771754036\n",
            "Patient_45: Receiving treatment at time 478.00196207629597\n",
            "Average wait time: 16.84 minutes\n"
          ]
        }
      ],
      "source": [
        "\n",
        "# Constants\n",
        "NUM_DOCTORS = 3\n",
        "NUM_NURSES = 6\n",
        "NUM_BEDS = 10\n",
        "SIMULATION_TIME = 480  # in minutes (e.g., 8 hours)\n",
        "\n",
        "# Variables to track statistics\n",
        "total_patients = 0\n",
        "total_wait_time = 0\n",
        "\n",
        "class Patient:\n",
        "    def __init__(self, env, name):\n",
        "        self.env = env\n",
        "        self.name = name\n",
        "        self.arrival_time = env.now\n",
        "        self.severity_level = random.randint(1, 5)  # Random severity level\n",
        "        self.treatment_time = random.randint(10, 30)  # Random treatment time\n",
        "\n",
        "    def triage(self):\n",
        "        print(f\"{self.name}: Being triaged at time {self.env.now}\")\n",
        "\n",
        "    def receive_treatment(self):\n",
        "        print(f\"{self.name}: Receiving treatment at time {self.env.now}\")\n",
        "        yield self.env.timeout(self.treatment_time)\n",
        "        print(f\"{self.name}: Treatment completed at time {self.env.now}\")\n",
        "\n",
        "    def visit_er(self):\n",
        "        global total_patients, total_wait_time\n",
        "        total_patients += 1\n",
        "        self.triage()\n",
        "\n",
        "        with doctors.request() as doctor:\n",
        "            with nurses.request() as nurse:\n",
        "                yield doctor & nurse  # Wait for doctor and nurse to be available\n",
        "                bed_request = beds.request()\n",
        "\n",
        "                yield bed_request\n",
        "                print(f\"{self.name}: Admitted to a bed at time {self.env.now}\")\n",
        "                yield self.env.timeout(5)  # Simulate some time spent in the bed\n",
        "\n",
        "                start_time = self.env.now\n",
        "                yield self.env.process(self.receive_treatment())\n",
        "\n",
        "                wait_time = self.env.now - start_time\n",
        "                total_wait_time += wait_time\n",
        "\n",
        "        beds.release(bed_request)\n",
        "        print(f\"{self.name}: Discharged at time {self.env.now}\")\n",
        "\n",
        "\n",
        "def patient_generator(env, num_patients):\n",
        "    for i in range(num_patients):\n",
        "        patient = Patient(env, f\"Patient_{i}\")\n",
        "        env.process(patient.visit_er())\n",
        "        inter_arrival_time = random.expovariate(1 / 10)  # Exponential distribution with mean 10\n",
        "        yield env.timeout(inter_arrival_time)\n",
        "\n",
        "\n",
        "# Initialize the simulation environment\n",
        "env = simpy.Environment()\n",
        "\n",
        "# Resource pools\n",
        "doctors = simpy.Resource(env, capacity=NUM_DOCTORS)\n",
        "nurses = simpy.Resource(env, capacity=NUM_NURSES)\n",
        "beds = simpy.Resource(env, capacity=NUM_BEDS)\n",
        "\n",
        "# Start the simulation\n",
        "env.process(patient_generator(env, num_patients=50))\n",
        "env.run(until=SIMULATION_TIME)\n",
        "\n",
        "# Calculate average wait time\n",
        "avg_wait_time = total_wait_time / total_patients\n",
        "print(f\"Average wait time: {avg_wait_time} minutes\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Here is a second run with histograms."
      ],
      "metadata": {
        "id": "nkGTSHQLWMUt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import simpy\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Constants\n",
        "NUM_DOCTORS = 3\n",
        "NUM_NURSES = 6\n",
        "NUM_BEDS = 10\n",
        "SIMULATION_TIME = 480  # in minutes (e.g., 8 hours)\n",
        "\n",
        "# Variables to track statistics\n",
        "total_patients = 0\n",
        "total_wait_time = 0\n",
        "wait_times = []\n",
        "severity_levels = []\n",
        "\n",
        "class Patient:\n",
        "    def __init__(self, env, name):\n",
        "        self.env = env\n",
        "        self.name = name\n",
        "        self.arrival_time = env.now\n",
        "        self.severity_level = random.randint(1, 5)  # Random severity level\n",
        "        self.treatment_time = random.randint(10, 30)  # Random treatment time\n",
        "\n",
        "    def triage(self):\n",
        "        print(f\"{self.name}: Being triaged at time {self.env.now}\")\n",
        "\n",
        "    def receive_treatment(self):\n",
        "        print(f\"{self.name}: Receiving treatment at time {self.env.now}\")\n",
        "        yield self.env.timeout(self.treatment_time)\n",
        "        print(f\"{self.name}: Treatment completed at time {self.env.now}\")\n",
        "\n",
        "    def visit_er(self):\n",
        "        global total_patients, total_wait_time, wait_times, severity_levels\n",
        "        total_patients += 1\n",
        "        self.triage()\n",
        "\n",
        "        with doctors.request() as doctor:\n",
        "            with nurses.request() as nurse:\n",
        "                yield doctor & nurse  # Wait for doctor and nurse to be available\n",
        "                bed_request = beds.request()\n",
        "\n",
        "                yield bed_request\n",
        "                print(f\"{self.name}: Admitted to a bed at time {self.env.now}\")\n",
        "                yield self.env.timeout(5)  # Simulate some time spent in the bed\n",
        "\n",
        "                start_time = self.env.now\n",
        "                yield self.env.process(self.receive_treatment())\n",
        "\n",
        "                wait_time = self.env.now - start_time\n",
        "                total_wait_time += wait_time\n",
        "                wait_times.append(wait_time)\n",
        "                severity_levels.append(self.severity_level)\n",
        "\n",
        "        beds.release(bed_request)\n",
        "        print(f\"{self.name}: Discharged at time {self.env.now}\")\n",
        "\n",
        "\n",
        "def patient_generator(env, num_patients):\n",
        "    for i in range(num_patients):\n",
        "        patient = Patient(env, f\"Patient_{i}\")\n",
        "        env.process(patient.visit_er())\n",
        "        inter_arrival_time = random.expovariate(1 / 10)  # Exponential distribution with mean 10\n",
        "        yield env.timeout(inter_arrival_time)\n",
        "\n",
        "\n",
        "# Initialize the simulation environment\n",
        "env = simpy.Environment()\n",
        "\n",
        "# Resource pools\n",
        "doctors = simpy.Resource(env, capacity=NUM_DOCTORS)\n",
        "nurses = simpy.Resource(env, capacity=NUM_NURSES)\n",
        "beds = simpy.Resource(env, capacity=NUM_BEDS)\n",
        "\n",
        "# Start the simulation\n",
        "env.process(patient_generator(env, num_patients=50))\n",
        "env.run(until=SIMULATION_TIME)\n",
        "\n",
        "# Calculate average wait time\n",
        "avg_wait_time = total_wait_time / total_patients\n",
        "print(f\"Average wait time: {avg_wait_time} minutes\")\n",
        "\n",
        "# Generate histograms\n",
        "plt.figure(figsize=(10, 4))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.hist(wait_times, bins=10, alpha=0.7)\n",
        "plt.xlabel('Wait Time (minutes)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of Patient Wait Times')\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.hist(severity_levels, bins=5, alpha=0.7)\n",
        "plt.xlabel('Severity Level')\n",
        "plt.ylabel('Frequency')\n",
        "plt.title('Histogram of Patient Severity Levels')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "DnzOuOg9V18k",
        "outputId": "4783cc15-e77d-4894-ba74-5b1d2963fdac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Patient_0: Being triaged at time 0\n",
            "Patient_0: Admitted to a bed at time 0\n",
            "Patient_0: Receiving treatment at time 5\n",
            "Patient_1: Being triaged at time 14.68808391711387\n",
            "Patient_1: Admitted to a bed at time 14.68808391711387\n",
            "Patient_0: Treatment completed at time 17\n",
            "Patient_0: Discharged at time 17\n",
            "Patient_2: Being triaged at time 18.286082759893855\n",
            "Patient_2: Admitted to a bed at time 18.286082759893855\n",
            "Patient_1: Receiving treatment at time 19.68808391711387\n",
            "Patient_2: Receiving treatment at time 23.286082759893855\n",
            "Patient_2: Treatment completed at time 36.28608275989386\n",
            "Patient_2: Discharged at time 36.28608275989386\n",
            "Patient_1: Treatment completed at time 41.68808391711387\n",
            "Patient_1: Discharged at time 41.68808391711387\n",
            "Patient_3: Being triaged at time 49.139049245536526\n",
            "Patient_3: Admitted to a bed at time 49.139049245536526\n",
            "Patient_3: Receiving treatment at time 54.139049245536526\n",
            "Patient_4: Being triaged at time 55.458546851059474\n",
            "Patient_4: Admitted to a bed at time 55.458546851059474\n",
            "Patient_5: Being triaged at time 57.62474079550428\n",
            "Patient_5: Admitted to a bed at time 57.62474079550428\n",
            "Patient_4: Receiving treatment at time 60.458546851059474\n",
            "Patient_6: Being triaged at time 61.46693052621632\n",
            "Patient_5: Receiving treatment at time 62.62474079550428\n",
            "Patient_3: Treatment completed at time 71.13904924553653\n",
            "Patient_3: Discharged at time 71.13904924553653\n",
            "Patient_6: Admitted to a bed at time 71.13904924553653\n",
            "Patient_6: Receiving treatment at time 76.13904924553653\n",
            "Patient_5: Treatment completed at time 85.62474079550428\n",
            "Patient_5: Discharged at time 85.62474079550428\n",
            "Patient_7: Being triaged at time 86.72300567976228\n",
            "Patient_7: Admitted to a bed at time 86.72300567976228\n",
            "Patient_8: Being triaged at time 87.41655797300702\n",
            "Patient_4: Treatment completed at time 90.45854685105948\n",
            "Patient_4: Discharged at time 90.45854685105948\n",
            "Patient_8: Admitted to a bed at time 90.45854685105948\n",
            "Patient_7: Receiving treatment at time 91.72300567976228\n",
            "Patient_9: Being triaged at time 92.46093312221274\n",
            "Patient_6: Treatment completed at time 94.13904924553653\n",
            "Patient_6: Discharged at time 94.13904924553653\n",
            "Patient_9: Admitted to a bed at time 94.13904924553653\n",
            "Patient_8: Receiving treatment at time 95.45854685105948\n",
            "Patient_10: Being triaged at time 95.52549683330335\n",
            "Patient_9: Receiving treatment at time 99.13904924553653\n",
            "Patient_7: Treatment completed at time 108.72300567976228\n",
            "Patient_7: Discharged at time 108.72300567976228\n",
            "Patient_10: Admitted to a bed at time 108.72300567976228\n",
            "Patient_10: Receiving treatment at time 113.72300567976228\n",
            "Patient_8: Treatment completed at time 122.45854685105948\n",
            "Patient_8: Discharged at time 122.45854685105948\n",
            "Patient_9: Treatment completed at time 123.13904924553653\n",
            "Patient_9: Discharged at time 123.13904924553653\n",
            "Patient_11: Being triaged at time 127.40521469090649\n",
            "Patient_11: Admitted to a bed at time 127.40521469090649\n",
            "Patient_11: Receiving treatment at time 132.4052146909065\n",
            "Patient_10: Treatment completed at time 133.72300567976228\n",
            "Patient_10: Discharged at time 133.72300567976228\n",
            "Patient_12: Being triaged at time 139.25933741716452\n",
            "Patient_12: Admitted to a bed at time 139.25933741716452\n",
            "Patient_13: Being triaged at time 141.10697839083076\n",
            "Patient_13: Admitted to a bed at time 141.10697839083076\n",
            "Patient_12: Receiving treatment at time 144.25933741716452\n",
            "Patient_13: Receiving treatment at time 146.10697839083076\n",
            "Patient_14: Being triaged at time 146.40051282214455\n",
            "Patient_11: Treatment completed at time 149.4052146909065\n",
            "Patient_11: Discharged at time 149.4052146909065\n",
            "Patient_14: Admitted to a bed at time 149.4052146909065\n",
            "Patient_15: Being triaged at time 152.43716531192453\n",
            "Patient_14: Receiving treatment at time 154.4052146909065\n",
            "Patient_12: Treatment completed at time 165.25933741716452\n",
            "Patient_12: Discharged at time 165.25933741716452\n",
            "Patient_15: Admitted to a bed at time 165.25933741716452\n",
            "Patient_16: Being triaged at time 165.2599785121492\n",
            "Patient_13: Treatment completed at time 167.10697839083076\n",
            "Patient_13: Discharged at time 167.10697839083076\n",
            "Patient_16: Admitted to a bed at time 167.10697839083076\n",
            "Patient_15: Receiving treatment at time 170.25933741716452\n",
            "Patient_16: Receiving treatment at time 172.10697839083076\n",
            "Patient_14: Treatment completed at time 179.4052146909065\n",
            "Patient_14: Discharged at time 179.4052146909065\n",
            "Patient_16: Treatment completed at time 188.10697839083076\n",
            "Patient_16: Discharged at time 188.10697839083076\n",
            "Patient_17: Being triaged at time 197.789207503799\n",
            "Patient_17: Admitted to a bed at time 197.789207503799\n",
            "Patient_15: Treatment completed at time 199.25933741716452\n",
            "Patient_15: Discharged at time 199.25933741716452\n",
            "Patient_17: Receiving treatment at time 202.789207503799\n",
            "Patient_18: Being triaged at time 204.67364586481432\n",
            "Patient_18: Admitted to a bed at time 204.67364586481432\n",
            "Patient_19: Being triaged at time 207.1600376589549\n",
            "Patient_19: Admitted to a bed at time 207.1600376589549\n",
            "Patient_20: Being triaged at time 207.78801062832022\n",
            "Patient_18: Receiving treatment at time 209.67364586481432\n",
            "Patient_19: Receiving treatment at time 212.1600376589549\n",
            "Patient_21: Being triaged at time 214.7210055651351\n",
            "Patient_17: Treatment completed at time 219.789207503799\n",
            "Patient_17: Discharged at time 219.789207503799\n",
            "Patient_20: Admitted to a bed at time 219.789207503799\n",
            "Patient_20: Receiving treatment at time 224.789207503799\n",
            "Patient_22: Being triaged at time 230.96236870430118\n",
            "Patient_18: Treatment completed at time 232.67364586481432\n",
            "Patient_18: Discharged at time 232.67364586481432\n",
            "Patient_21: Admitted to a bed at time 232.67364586481432\n",
            "Patient_19: Treatment completed at time 234.1600376589549\n",
            "Patient_19: Discharged at time 234.1600376589549\n",
            "Patient_22: Admitted to a bed at time 234.1600376589549\n",
            "Patient_21: Receiving treatment at time 237.67364586481432\n",
            "Patient_22: Receiving treatment at time 239.1600376589549\n",
            "Patient_23: Being triaged at time 241.15689743086412\n",
            "Patient_20: Treatment completed at time 242.789207503799\n",
            "Patient_20: Discharged at time 242.789207503799\n",
            "Patient_23: Admitted to a bed at time 242.789207503799\n",
            "Patient_23: Receiving treatment at time 247.789207503799\n",
            "Patient_21: Treatment completed at time 259.6736458648143\n",
            "Patient_21: Discharged at time 259.6736458648143\n",
            "Patient_24: Being triaged at time 260.9931976712349\n",
            "Patient_24: Admitted to a bed at time 260.9931976712349\n",
            "Patient_22: Treatment completed at time 262.16003765895493\n",
            "Patient_22: Discharged at time 262.16003765895493\n",
            "Patient_24: Receiving treatment at time 265.9931976712349\n",
            "Patient_25: Being triaged at time 269.8781295250409\n",
            "Patient_25: Admitted to a bed at time 269.8781295250409\n",
            "Patient_23: Treatment completed at time 270.789207503799\n",
            "Patient_23: Discharged at time 270.789207503799\n",
            "Patient_25: Receiving treatment at time 274.8781295250409\n",
            "Patient_26: Being triaged at time 283.4596445829715\n",
            "Patient_26: Admitted to a bed at time 283.4596445829715\n",
            "Patient_24: Treatment completed at time 287.9931976712349\n",
            "Patient_24: Discharged at time 287.9931976712349\n",
            "Patient_26: Receiving treatment at time 288.4596445829715\n",
            "Patient_25: Treatment completed at time 302.8781295250409\n",
            "Patient_25: Discharged at time 302.8781295250409\n",
            "Patient_26: Treatment completed at time 311.4596445829715\n",
            "Patient_26: Discharged at time 311.4596445829715\n",
            "Patient_27: Being triaged at time 312.91665883023853\n",
            "Patient_27: Admitted to a bed at time 312.91665883023853\n",
            "Patient_28: Being triaged at time 317.0163342488258\n",
            "Patient_28: Admitted to a bed at time 317.0163342488258\n",
            "Patient_27: Receiving treatment at time 317.91665883023853\n",
            "Patient_29: Being triaged at time 320.97176453861704\n",
            "Patient_29: Admitted to a bed at time 320.97176453861704\n",
            "Patient_28: Receiving treatment at time 322.0163342488258\n",
            "Patient_29: Receiving treatment at time 325.97176453861704\n",
            "Patient_29: Treatment completed at time 335.97176453861704\n",
            "Patient_29: Discharged at time 335.97176453861704\n",
            "Patient_30: Being triaged at time 339.19140524518093\n",
            "Patient_30: Admitted to a bed at time 339.19140524518093\n",
            "Patient_28: Treatment completed at time 342.0163342488258\n",
            "Patient_28: Discharged at time 342.0163342488258\n",
            "Patient_27: Treatment completed at time 343.91665883023853\n",
            "Patient_27: Discharged at time 343.91665883023853\n",
            "Patient_30: Receiving treatment at time 344.19140524518093\n",
            "Patient_30: Treatment completed at time 367.19140524518093\n",
            "Patient_30: Discharged at time 367.19140524518093\n",
            "Patient_31: Being triaged at time 372.93921156946806\n",
            "Patient_31: Admitted to a bed at time 372.93921156946806\n",
            "Patient_31: Receiving treatment at time 377.93921156946806\n",
            "Patient_32: Being triaged at time 379.56579619819433\n",
            "Patient_32: Admitted to a bed at time 379.56579619819433\n",
            "Patient_33: Being triaged at time 381.1054856161589\n",
            "Patient_33: Admitted to a bed at time 381.1054856161589\n",
            "Patient_32: Receiving treatment at time 384.56579619819433\n",
            "Patient_33: Receiving treatment at time 386.1054856161589\n",
            "Patient_34: Being triaged at time 392.2538630210037\n",
            "Patient_35: Being triaged at time 393.9252568736723\n",
            "Patient_31: Treatment completed at time 398.93921156946806\n",
            "Patient_31: Discharged at time 398.93921156946806\n",
            "Patient_34: Admitted to a bed at time 398.93921156946806\n",
            "Patient_34: Receiving treatment at time 403.93921156946806\n",
            "Patient_33: Treatment completed at time 404.1054856161589\n",
            "Patient_33: Discharged at time 404.1054856161589\n",
            "Patient_35: Admitted to a bed at time 404.1054856161589\n",
            "Patient_32: Treatment completed at time 405.56579619819433\n",
            "Patient_32: Discharged at time 405.56579619819433\n",
            "Patient_35: Receiving treatment at time 409.1054856161589\n",
            "Patient_36: Being triaged at time 417.38747566224373\n",
            "Patient_36: Admitted to a bed at time 417.38747566224373\n",
            "Patient_37: Being triaged at time 418.12610245429636\n",
            "Patient_36: Receiving treatment at time 422.38747566224373\n",
            "Patient_38: Being triaged at time 428.64932004991306\n",
            "Patient_34: Treatment completed at time 429.93921156946806\n",
            "Patient_34: Discharged at time 429.93921156946806\n",
            "Patient_37: Admitted to a bed at time 429.93921156946806\n",
            "Patient_35: Treatment completed at time 430.1054856161589\n",
            "Patient_35: Discharged at time 430.1054856161589\n",
            "Patient_38: Admitted to a bed at time 430.1054856161589\n",
            "Patient_39: Being triaged at time 432.01533687822695\n",
            "Patient_40: Being triaged at time 432.217722183152\n",
            "Patient_37: Receiving treatment at time 434.93921156946806\n",
            "Patient_38: Receiving treatment at time 435.1054856161589\n",
            "Patient_41: Being triaged at time 436.66615675037514\n",
            "Patient_36: Treatment completed at time 440.38747566224373\n",
            "Patient_36: Discharged at time 440.38747566224373\n",
            "Patient_39: Admitted to a bed at time 440.38747566224373\n",
            "Patient_37: Treatment completed at time 444.93921156946806\n",
            "Patient_37: Discharged at time 444.93921156946806\n",
            "Patient_40: Admitted to a bed at time 444.93921156946806\n",
            "Patient_39: Receiving treatment at time 445.38747566224373\n",
            "Patient_40: Receiving treatment at time 449.93921156946806\n",
            "Patient_42: Being triaged at time 453.1503803135016\n",
            "Patient_38: Treatment completed at time 456.1054856161589\n",
            "Patient_38: Discharged at time 456.1054856161589\n",
            "Patient_41: Admitted to a bed at time 456.1054856161589\n",
            "Patient_41: Receiving treatment at time 461.1054856161589\n",
            "Patient_43: Being triaged at time 462.72469255429496\n",
            "Patient_44: Being triaged at time 465.1979594182969\n",
            "Patient_39: Treatment completed at time 474.38747566224373\n",
            "Patient_39: Discharged at time 474.38747566224373\n",
            "Patient_42: Admitted to a bed at time 474.38747566224373\n",
            "Patient_45: Being triaged at time 475.7450177918887\n",
            "Patient_41: Treatment completed at time 477.1054856161589\n",
            "Patient_41: Discharged at time 477.1054856161589\n",
            "Patient_43: Admitted to a bed at time 477.1054856161589\n",
            "Patient_40: Treatment completed at time 478.93921156946806\n",
            "Patient_40: Discharged at time 478.93921156946806\n",
            "Patient_44: Admitted to a bed at time 478.93921156946806\n",
            "Patient_42: Receiving treatment at time 479.38747566224373\n",
            "Average wait time: 19.17391304347826 minutes\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}